workflow:
  rules:
    # Disable merge request pipelines
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

default:
  interruptible: true

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # Cache .npm
  NPM_CONFIG_CACHE: "${CI_PROJECT_DIR}/tmp/npm"
  # Prefer offline node module installation
  NPM_CONFIG_PREFER_OFFLINE: "true"
  # `ts-node` has its own cache
  TS_CACHED_TRANSPILE_CACHE: "${CI_PROJECT_DIR}/tmp/ts-node-cache"
  TS_CACHED_TRANSPILE_PORTABLE: "true"
  # Homebrew cache only used by macos runner
  HOMEBREW_CACHE: "${CI_PROJECT_DIR}/tmp/Homebrew"

# Cached directories shared between jobs & pipelines per-branch per-runner
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - ./tmp/npm/
    - ./tmp/ts-node-cache/
    # Homebrew cache is only used by the macos runner
    - ./tmp/Homebrew
    # `jest` cache is configured in jest.config.js
    - ./tmp/jest/

stages:
  - check        # Linting, unit tests
  - build        # Cross-platform library compilation, unit tests
  - integration  # Cross-platform application bundling, integration tests, and pre-release
  - release      # Cross-platform distribution and deployment

image: registry.gitlab.com/matrixai/engineering/maintenance/gitlab-runner

check:lint:
  stage: check
  needs: []
  script:
    - >
        nix-shell --run '
        npm run lint;
        '
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
    - when: always

check:nix-dry:
  stage: check
  needs: []
  script:
    - nix-build -v -v --dry-run ./release.nix
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
    - when: always

check:test:
  stage: check
  needs: []
  script:
    - >
        nix-shell --run '
        npm run build --verbose;
        npm test -- --ci;
        '
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
    # This job will be overridden by `build:linux`
    - if: $CI_COMMIT_BRANCH == 'staging'
      when: never
    - when: always

build:linux:
  stage: build
  needs:
    - check:lint
  script:
    - >
        nix-shell --run '
        npm run build --verbose;
        npm test -- --ci;
        '
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
    paths:
      - ./prebuilds/
      # Only the build:linux preserves the dist
      - ./dist
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
    - if: $CI_COMMIT_BRANCH == 'staging'

build:windows:
  stage: build
  needs:
    - check:lint
  tags:
    - windows
  before_script:
    - choco install nodejs --version=16.14.2 -y
    - choco install python --version=3.9.12 -y
    - refreshenv
  script:
    - npm config set msvs_version 2019
    - npm install --ignore-scripts
    - $env:Path = "$(npm bin);" + $env:Path
    - npm run build --verbose
    - npm test -- --ci
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
    paths:
      - ./prebuilds/
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
    - if: $CI_COMMIT_BRANCH == 'staging'

build:macos:
  stage: build
  needs:
    - check:lint
  tags:
    - shared-macos-amd64
  image: macos-11-xcode-12
  variables:
    HOMEBREW_NO_INSTALL_UPGRADE: "true"
    HOMEBREW_NO_INSTALL_CLEANUP: "true"
  before_script:
    - brew install node@16
    - brew link --overwrite node@16
    - brew install python@3.9
    - brew link --overwrite python@3.9
    - hash -r
  script:
    - npm install --ignore-scripts
    - export PATH="$(npm bin):$PATH"
    - export PREBUILD_ARCH=x64+arm64
    - npm run build --verbose
    - npm test -- --ci
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
    paths:
      - ./prebuilds/
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - if: $CI_COMMIT_BRANCH == 'master'
      when: manual
    - if: $CI_COMMIT_BRANCH == 'staging'

build:prerelease:
  stage: build
  # Needing the build jobs to complete means this only runs as part of staging
  needs:
    - build:linux
    - build:windows
    - build:macos
  variables:
    npm_config_auth: "$NPM_TOKEN"
  script:
    - echo $npm_config_auth
    - >
        nix-shell --run '
        npm publish --tag staging --access public;
        '
  rules:
    # Only run this for version tags that have pre-release
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.+/ && $CI_COMMIT_REF_PROTECTED == "true"
    - when: never

# could we do this based ona a COMMIT on the staging branch
# one that which has a tag?

# integration:builds:
#   stage: integration
#   needs:
#     - build:linux
#     - build:windows
#     - build:macos
#   script:
#     - mkdir -p ./builds
#     - >
#         build_application="$(nix-build \
#           --max-jobs "$(nproc)" --cores "$(nproc)" \
#           ./release.nix  \
#           --attr application \
#         )"
#     - >
#         nix-store --export $( \
#           nix-store --query --requisites "$build_application" \
#         ) | gzip > ./builds/typescript-demo-lib.closure.gz
#     # non-nix targets
#     - >
#         builds="$(nix-build \
#           --max-jobs "$(nproc)" --cores "$(nproc)" \
#           ./release.nix \
#           --attr docker \
#           --attr package.linux.x64.elf \
#           --attr package.windows.x64.exe \
#           --attr package.macos.x64.macho \
#           --attr package.macos.arm64.macho)"
#     - cp -r $builds ./builds/
#   artifacts:
#     paths:
#       - ./builds/
#   rules:
#     - if: $CI_COMMIT_TAG
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'master'
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'staging'

# integration:nix:
#   stage: integration
#   needs:
#     - integration:builds
#   script:
#     - >
#         build_application="$( \
#           gunzip -c ./builds/typescript-demo-lib.closure.gz | \
#           nix-store --import | \
#           tail -1 \
#         )"
#     - $build_application/bin/typescript-demo-lib
#   rules:
#     - if: $CI_COMMIT_TAG
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'master'
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'staging'

# integration:docker:
#   stage: integration
#   needs:
#     - integration:builds
#   image: docker:20.10.11
#   services:
#     - docker:20.10.11-dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#   before_script:
#     - docker info
#   script:
#     - image="$(docker load --input ./builds/*docker* | cut -d' ' -f3)"
#     - docker run "$image"
#   rules:
#     - if: $CI_COMMIT_TAG
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'master'
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'staging'

# integration:linux:
#   stage: integration
#   needs:
#     - integration:builds
#   image: ubuntu:latest
#   script:
#     - for f in ./builds/*-linux-*; do "$f"; done
#   rules:
#     - if: $CI_COMMIT_TAG
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'master'
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'staging'

# integration:windows:
#   stage: integration
#   needs:
#     - integration:builds
#   tags:
#     - windows
#   script:
#     - Get-ChildItem -File ./builds/*-win-* | ForEach {& $_.FullName}
#   rules:
#     - if: $CI_COMMIT_TAG
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'master'
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'staging'

# integration:macos:
#   stage: integration
#   needs:
#     - integration:builds
#   tags:
#     - shared-macos-amd64
#   image: macos-11-xcode-12
#   script:
#     - for f in ./builds/*-macos-x64*; do "$f"; done
#   rules:
#     - if: $CI_COMMIT_TAG
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'master'
#       when: manual
#     - if: $CI_COMMIT_BRANCH == 'staging'

# # packages:
# #   stage: release
# #   image: registry.gitlab.com/matrixai/engineering/maintenance/gitlab-runner
# #   dependencies:
# #     - nix
# #   script:
# #     - >
# #         nix-shell -I nixpkgs=./pkgs.nix --packages git gitAndTools.gh --run '
# #         commit="$(git rev-parse --short HEAD)";
# #         gh release \
# #           create "$commit" \
# #           builds/*.closure.gz \
# #           builds/*-linux-* \
# #           builds/*-win-* \
# #           builds/*-macos-* \
# #           --title "Build-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
# #           --prerelease \
# #           --notes "" \
# #           --repo MatrixAI/TypeScript-Demo-Lib;
# #         '
# #   only:
# #     - master
